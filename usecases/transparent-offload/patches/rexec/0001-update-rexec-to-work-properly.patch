From 519b2782582c8737410a85cd4e81f65461efa4ce Mon Sep 17 00:00:00 2001
From: Deng Guangxing <dengguangxing@huawei.com>
Date: Fri, 19 Aug 2022 16:52:05 +0800
Subject: [PATCH] update rexec to work properly

Signed-off-by: Deng Guangxing <dengguangxing@huawei.com>
---
 examples/rexec/Makefile               |  10 ++
 examples/rexec/client.go              |  58 ++++++---
 examples/rexec/common.go              | 108 ++++++++++++++++
 examples/rexec/rexec_server/cert.pem  |  18 ---
 examples/rexec/rexec_server/key.pem   |  27 ----
 examples/rexec/rexec_server/server.go | 125 ------------------
 examples/rexec/server.go              | 179 ++++++++++++++++++++++++++
 7 files changed, 340 insertions(+), 185 deletions(-)
 create mode 100644 examples/rexec/Makefile
 create mode 100644 examples/rexec/common.go
 delete mode 100644 examples/rexec/rexec_server/cert.pem
 delete mode 100644 examples/rexec/rexec_server/key.pem
 delete mode 100644 examples/rexec/rexec_server/server.go
 create mode 100644 examples/rexec/server.go

diff --git a/examples/rexec/Makefile b/examples/rexec/Makefile
new file mode 100644
index 0000000..8f95c42
--- /dev/null
+++ b/examples/rexec/Makefile
@@ -0,0 +1,10 @@
+all: rexec rexec_server
+
+rexec : client.go common.go
+	go build -o rexec client.go common.go
+
+rexec_server : server.go common.go
+	go build -o rexec_server server.go common.go
+
+clean:
+	rm -rf rexec rexec_server
diff --git a/examples/rexec/client.go b/examples/rexec/client.go
index bd3a084..081cc3d 100644
--- a/examples/rexec/client.go
+++ b/examples/rexec/client.go
@@ -2,28 +2,27 @@ package main
 
 import (
 	"crypto/tls"
-	"io"
 	"log"
 	"net"
 	"os"
+	"os/signal"
+	"syscall"
+	"time"
 
 	"github.com/docker/libchan"
 	"github.com/docker/libchan/spdy"
 )
 
-// RemoteCommand is the run parameters to be executed remotely
-type RemoteCommand struct {
-	Cmd        string
-	Args       []string
-	Stdin      io.Writer
-	Stdout     io.Reader
-	Stderr     io.Reader
-	StatusChan libchan.Sender
-}
+func sigHandler() {
+	c := make(chan os.Signal)
+	signal.Notify(c, syscall.SIGPIPE)
 
-// CommandResponse is the returned response object from the remote execution
-type CommandResponse struct {
-	Status int
+	for {
+		select {
+		case s := <-c:
+			log.Printf("rexec get signal: %v\n", s)
+		}
+	}
 }
 
 func main() {
@@ -33,10 +32,17 @@ func main() {
 
 	var client net.Conn
 	var err error
+
+	go sigHandler()
+	na , err := parseNetAddr()
+	if err != nil {
+		log.Fatal(err)
+	}
+
 	if os.Getenv("USE_TLS") != "" {
-		client, err = tls.Dial("tcp", "127.0.0.1:9323", &tls.Config{InsecureSkipVerify: true})
+		client, err = tls.Dial("tcp", na.Addr, &tls.Config{InsecureSkipVerify: true})
 	} else {
-		client, err = net.Dial("tcp", "127.0.0.1:9323")
+		client, err = net.Dial(na.Proto, na.Addr)
 	}
 	if err != nil {
 		log.Fatal(err)
@@ -60,6 +66,7 @@ func main() {
 		Stdin:      os.Stdin,
 		Stdout:     os.Stdout,
 		Stderr:     os.Stderr,
+		Env:		append([]string{}, os.Environ()...),
 		StatusChan: remoteSender,
 	}
 
@@ -68,9 +75,30 @@ func main() {
 		log.Fatal(err)
 	}
 
+	retryCnt := 3
+	// 1. get pid from response
+	time.Sleep(5*time.Millisecond)
 	response := &CommandResponse{}
+retry:
+	err = receiver.Receive(response)
+	if err != nil {
+		if retryCnt >= 0 {
+			time.Sleep(5 * time.Millisecond)
+			retryCnt--
+			goto retry
+		}
+		log.Fatal(err)
+	}
+	retryCnt = 3
+	// 2. get return status from response
+retry2:
 	err = receiver.Receive(response)
 	if err != nil {
+		if retryCnt >= 0 {
+			time.Sleep(5 * time.Millisecond)
+			retryCnt--
+			goto retry2
+		}
 		log.Fatal(err)
 	}
 
diff --git a/examples/rexec/common.go b/examples/rexec/common.go
new file mode 100644
index 0000000..a332fae
--- /dev/null
+++ b/examples/rexec/common.go
@@ -0,0 +1,108 @@
+package main
+
+import (
+	"fmt"
+	"io"
+	"net"
+	"net/url"
+	"os"
+	"strconv"
+	"strings"
+
+	"github.com/docker/libchan"
+)
+
+// RemoteCommand is the run parameters to be executed remotely
+type RemoteCommand struct {
+	Cmd        string
+	Args       []string
+	Env        []string
+	Stdin      io.Reader
+	Stdout     io.WriteCloser
+	Stderr     io.WriteCloser
+	StatusChan libchan.Sender
+	Cgroups    map[string]string
+}
+
+// CommandResponse is the returned response object from the remote execution
+type CommandResponse struct {
+	Pid	   int
+	Status int
+}
+
+// NetAddr is struct to describe net proto and addr
+type NetAddr struct {
+	Proto string
+	Addr  string
+}
+
+func parseTCPAddr(inAddr string) (NetAddr, error) {
+	if inAddr == "" {
+		return NetAddr{}, fmt.Errorf("empty TCP addr")
+	}
+
+	addr := strings.TrimPrefix(inAddr, "tcp://")
+	addr = strings.TrimSpace(addr)
+	if strings.Contains(addr, "://") || addr == "" {
+		return NetAddr{}, fmt.Errorf("invalid proto, expected tcp: %s", inAddr)
+	}
+
+	u, err := url.Parse("tcp://" + addr)
+	if err != nil {
+		return NetAddr{}, err
+	}
+	host, port, err := net.SplitHostPort(u.Host)
+	if err != nil {
+		return NetAddr{}, fmt.Errorf("invalid bind address format: %s", inAddr)
+	}
+
+	if host == "" || port == "" {
+		return NetAddr{}, fmt.Errorf("invalid bind address format: %s", inAddr)
+	}
+	p, err := strconv.Atoi(port)
+	if err != nil && p == 0 {
+		return NetAddr{}, fmt.Errorf("invalid bind address format: %s", inAddr)
+	}
+
+	return NetAddr{
+		Proto: "tcp",
+		Addr:  host + ":" + port,
+	}, nil
+}
+
+func parseUnixAddr(inAddr string) (NetAddr, error) {
+	addr := strings.TrimPrefix(inAddr, "unix://")
+	if strings.Contains(addr, "://") || addr == "" {
+		return NetAddr{}, fmt.Errorf("invalid proto, expected unix: %s", addr)
+	}
+
+	return NetAddr {
+		Proto: "unix",
+		Addr:  addr,
+	}, nil
+}
+
+func parseNetAddr() (NetAddr, error) {
+	cna := os.Getenv("CMD_NET_ADDR")
+
+	// default netAddr: tcp://127.0.0.1:9323
+	if strings.TrimSpace(cna) == "" {
+		return NetAddr{}, fmt.Errorf("need CMD_NET_ADDR")
+	}
+
+	parts := strings.SplitN(cna, "://", 2)
+	if len(parts) == 1 && parts[0] != "" {
+		parts = []string{"tcp", parts[0]}
+	}
+
+	switch parts[0] {
+	case "tcp":
+		return parseTCPAddr(parts[1])
+	case "unix":
+		return parseUnixAddr(parts[1])
+	default:
+		return NetAddr{}, fmt.Errorf("invalid bind address format: %s", cna)
+	}
+
+	return NetAddr{}, fmt.Errorf("invalid bind address format: %s", cna)
+}
diff --git a/examples/rexec/rexec_server/cert.pem b/examples/rexec/rexec_server/cert.pem
deleted file mode 100644
index 2c2863a..0000000
--- a/examples/rexec/rexec_server/cert.pem
+++ /dev/null
@@ -1,18 +0,0 @@
------BEGIN CERTIFICATE-----
-MIIC1zCCAcGgAwIBAgIBADALBgkqhkiG9w0BAQUwEDEOMAwGA1UEChMFcmV4ZWMw
-HhcNMTMxMjMxMjM1OTU5WhcNNDkxMjMxMjM1OTU5WjAQMQ4wDAYDVQQKEwVyZXhl
-YzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMZs3mSUB352e5yCh0ho
-nbr/dvvHaHsS2KERyILQBynqbD2DvLpdL2n1IYb+uHFt6XPnZKnkCznGviVLPGcf
-WahzG04updvfY/uXh1m7Wz+J/DDldkqGE5PO39uC1rKkbTGKnh21U5LVeRfzgznN
-VpEha0IWBEZIdRm/rpB9OynUH/yzmtTxmQnVW6QvggTEm0HcY4sGRRwpcR/8QWMr
-v49OnHujMAndrWCYZ8O+9FNd/dIWlmdCq2WxD/0fQ/Ylkml8hpvPBmVdcBom7FOD
-HGoMiiW+M9YvZfMYl+bckRKyF0IQatW7BTWP9GduyBP8CHU1DqBgoMSlKt+yOWt9
-pzECAwEAAaNAMD4wDgYDVR0PAQH/BAQDAgCgMBAGA1UdEwEB/wQGMAQCAgD/MBoG
-A1UdEQQTMBGCCWxvY2FsaG9zdIcEfwAAATALBgkqhkiG9w0BAQUDggEBAC/efFHQ
-AO19EWm4KFlkw2FMOy+xwkCuUCL0fXnCbOezGCzYpBWMcE5JFA9Znd7LCYLvRMmC
-LoFjAJRyjPPiKoAENv+wDKVnbfygVsxdQ+WVSmkK7TuElgDbzUcgDepeZGGx623Q
-9waiJaeBJGA9zvvoheabAuYQ8VYSbxO/nLQWSzwg5e1cosupWQSojftys8eSBcv2
-3DK8+Um9U5mASFwyclk/0gpZKF2SmjXweEcWqELLZtFJCZlXa2yzz0UxIzmAYbFP
-Hd7y0jA+UCPdukS9gf0YEW4ak2U8kYHuA6F0lbvWZH2wCy6XQGam9XZptj9WOo0v
-YLTya68Tf6vCre4=
------END CERTIFICATE-----
diff --git a/examples/rexec/rexec_server/key.pem b/examples/rexec/rexec_server/key.pem
deleted file mode 100644
index dfc57c7..0000000
--- a/examples/rexec/rexec_server/key.pem
+++ /dev/null
@@ -1,27 +0,0 @@
------BEGIN RSA PRIVATE KEY-----
-MIIEpAIBAAKCAQEAxmzeZJQHfnZ7nIKHSGiduv92+8doexLYoRHIgtAHKepsPYO8
-ul0vafUhhv64cW3pc+dkqeQLOca+JUs8Zx9ZqHMbTi6l299j+5eHWbtbP4n8MOV2
-SoYTk87f24LWsqRtMYqeHbVTktV5F/ODOc1WkSFrQhYERkh1Gb+ukH07KdQf/LOa
-1PGZCdVbpC+CBMSbQdxjiwZFHClxH/xBYyu/j06ce6MwCd2tYJhnw770U1390haW
-Z0KrZbEP/R9D9iWSaXyGm88GZV1wGibsU4McagyKJb4z1i9l8xiX5tyRErIXQhBq
-1bsFNY/0Z27IE/wIdTUOoGCgxKUq37I5a32nMQIDAQABAoIBAF1dWqNut7v8mhtB
-m9ApUZZsoBrGcFYAvyfCy1sp8UT6xeWH+CSktiugKR9w+W597iwYQ9hgshuEdXHs
-3cYUDUbiqoV2E5rKmSwH16sUKlJSZfTH84oLXmjdHZ4XCVjTX4HBHLcT2/gqNCld
-7nAjO0lctTBKVcaQT3FHLSdVlaIPFlbS4+eB6QgSLWhY56GL5lGF3kqq+N1DT81H
-LMnJgLcl5nFy84cCvtPljosTP6tp4yULyqAfgDV9JA6KwKIzqJwH8WP3W09bKLuD
-YEF5kiFPCYZ9bykfPs8tCgl619qdlvaA0kmN7tN7z59C0SMm64mSBFfMYB1DjA9V
-FLwwMDECgYEA00TA1ixHKCrDYBWgFGI9p0hcgrwOgNFL7MiTW7JTpehsV1Uew/sn
-o92Ba3IuUtrS4Q9dXVoWFrYSdBhEhCZsoOgJtlQRUI6udhVg78bCtJ1rzbU+HCpU
-TqcjEvfoeRzhUCcKslHdgj6Wi0kPw4tbwfpkf3JoUNtO7dUYu4KyURUCgYEA8G/6
-lRYzPYrBnBlyA/VmFnCYKYbsYXVkvjly9VcAJLzR+Ayt1uz+3HQNXDs8LfSO4G7A
-kHX/tRATBPaOKhthwIUSXnsn2o86C9Y7qk5S+bx2ijOOzDZf+AVJrifJvEfTEpE/
-tcF8sZ3u3dcUp+uGIKLuqXsewhRkcsNHQ0WobK0CgYEAt4DUbjLva3gZU2/1Jz9d
-hdtYX0Ww4zrn07c0J0VxWn3S/Ng2bMvN1osjSoxWqCjhWhLaaadB4GAtDyG1AYPO
-fsSNCw1iLLKB3pcbJ6lgnTjO1lJCrHwn1lleIa+rAOeQ3OnMZK6u095BLKI9Sv/U
-p1wxxnE9Il4a5IFfhh8zezECgYAoC05dtDPWhRyXxfkiRaW6CQieqfUGikm8EM9f
-oxzIAZaqzFnLmO8dgkqTWN49/SQqpud1Z+Gtoz63reShiKvwJ3mWuMY7dW1CeWy4
-gZD6PPQ1Mj8PLeMv6JmL4t6LeB7kUcKdn9sHrfkRg3fSO7y8BMbg/TtzMXhFUNa2
-koxphQKBgQDC2b9vzR2I8UgK63RjcFJQjsyNbBcF3FJ7+eaakRkTflOaBkeuXTs4
-ZxO9c0ShMVZ6lcBrll2ZrHx1yLrUFgQYYvzJQvMjG1Y7Up4l2gurMvckfG2lGI/B
-NHuXlarw598fJP9PX75TyD3+ayDtm/pazBH9kSMupNJ7RNVuKy5v8w==
------END RSA PRIVATE KEY-----
diff --git a/examples/rexec/rexec_server/server.go b/examples/rexec/rexec_server/server.go
deleted file mode 100644
index ac0a71a..0000000
--- a/examples/rexec/rexec_server/server.go
+++ /dev/null
@@ -1,125 +0,0 @@
-package main
-
-import (
-	"crypto/tls"
-	"io"
-	"log"
-	"net"
-	"os"
-	"os/exec"
-	"syscall"
-
-	"github.com/docker/libchan"
-	"github.com/docker/libchan/spdy"
-)
-
-// RemoteCommand is the received command parameters to execute locally and return
-type RemoteCommand struct {
-	Cmd        string
-	Args       []string
-	Stdin      io.Reader
-	Stdout     io.WriteCloser
-	Stderr     io.WriteCloser
-	StatusChan libchan.Sender
-}
-
-// CommandResponse is the response struct to return to the client
-type CommandResponse struct {
-	Status int
-}
-
-func main() {
-	cert := os.Getenv("TLS_CERT")
-	key := os.Getenv("TLS_KEY")
-
-	var listener net.Listener
-	if cert != "" && key != "" {
-		tlsCert, err := tls.LoadX509KeyPair(cert, key)
-		if err != nil {
-			log.Fatal(err)
-		}
-
-		tlsConfig := &tls.Config{
-			InsecureSkipVerify: true,
-			Certificates:       []tls.Certificate{tlsCert},
-		}
-
-		listener, err = tls.Listen("tcp", "localhost:9323", tlsConfig)
-		if err != nil {
-			log.Fatal(err)
-		}
-	} else {
-		var err error
-		listener, err = net.Listen("tcp", "localhost:9323")
-		if err != nil {
-			log.Fatal(err)
-		}
-	}
-
-	for {
-		c, err := listener.Accept()
-		if err != nil {
-			log.Print(err)
-			break
-		}
-		p, err := spdy.NewSpdyStreamProvider(c, true)
-		if err != nil {
-			log.Print(err)
-			break
-		}
-		t := spdy.NewTransport(p)
-
-		go func() {
-			for {
-				receiver, err := t.WaitReceiveChannel()
-				if err != nil {
-					log.Print(err)
-					break
-				}
-
-				go func() {
-					for {
-						command := &RemoteCommand{}
-						err := receiver.Receive(command)
-						if err != nil {
-							log.Print(err)
-							break
-						}
-
-						cmd := exec.Command(command.Cmd, command.Args...)
-						cmd.Stdout = command.Stdout
-						cmd.Stderr = command.Stderr
-
-						stdin, err := cmd.StdinPipe()
-						if err != nil {
-							log.Print(err)
-							break
-						}
-						go func() {
-							io.Copy(stdin, command.Stdin)
-							stdin.Close()
-						}()
-
-						res := cmd.Run()
-						command.Stdout.Close()
-						command.Stderr.Close()
-						returnResult := &CommandResponse{}
-						if res != nil {
-							if exiterr, ok := res.(*exec.ExitError); ok {
-								returnResult.Status = exiterr.Sys().(syscall.WaitStatus).ExitStatus()
-							} else {
-								log.Print(res)
-								returnResult.Status = 10
-							}
-						}
-
-						err = command.StatusChan.Send(returnResult)
-						if err != nil {
-							log.Print(err)
-						}
-					}
-				}()
-			}
-		}()
-	}
-}
diff --git a/examples/rexec/server.go b/examples/rexec/server.go
new file mode 100644
index 0000000..4e910ea
--- /dev/null
+++ b/examples/rexec/server.go
@@ -0,0 +1,179 @@
+package main
+
+import (
+	"crypto/tls"
+	"fmt"
+	"io"
+	"log"
+	"net"
+	"os"
+	"os/exec"
+	"strings"
+	"syscall"
+	"time"
+
+	"github.com/docker/libchan/spdy"
+)
+
+func getHost(addr string) string {
+	return strings.Split(addr, ":")[0]
+}
+
+func main() {
+	cert := os.Getenv("TLS_CERT")
+	key := os.Getenv("TLS_KEY")
+
+	var listener net.Listener
+	na, err := parseNetAddr()
+	if err != nil {
+		log.Fatal(err)
+	}
+	if cert != "" && key != "" {
+		tlsCert, err := tls.LoadX509KeyPair(cert, key)
+		if err != nil {
+			log.Fatal(err)
+		}
+
+		tlsConfig := &tls.Config{
+			InsecureSkipVerify: true,
+			Certificates:       []tls.Certificate{tlsCert},
+		}
+
+		listener, err = tls.Listen("tcp", na.Addr, tlsConfig)
+		if err != nil {
+			log.Fatal(err)
+		}
+	} else {
+		var err error
+		listener, err = net.Listen(na.Proto, na.Addr)
+		if err != nil {
+			log.Fatal(err)
+		}
+	}
+
+	for {
+		c, err := listener.Accept()
+		if err != nil {
+			log.Print(err)
+			break
+		}
+		p, err := spdy.NewSpdyStreamProvider(c, true)
+		if err != nil {
+			log.Print(err)
+			break
+		}
+		t := spdy.NewTransport(p)
+
+		go func() {
+			switch t.(type) {
+			case *spdy.Transport:
+				ts, ok := t.(*spdy.Transport)
+				if ok {
+					defer ts.Close()
+				}
+			default:
+				log.Print("Error occurred during transport type assertion")
+			}
+
+			receiver, err := t.WaitReceiveChannel()
+			if err != nil {
+				log.Print(err)
+				return
+			}
+
+			command := &RemoteCommand{}
+			err = receiver.Receive(command)
+			if err != nil {
+				log.Print(err)
+				return
+			}
+			log.Printf("cmd(%s), args(%v)\n", command.Cmd, command.Args)
+
+			cmd := exec.Command(command.Cmd, command.Args...)
+			cmd.Stdout = command.Stdout
+			cmd.Stderr = command.Stderr
+			cmd.Env = append([]string{}, command.Env...)
+
+			stdin, err := cmd.StdinPipe()
+			if err != nil {
+				log.Print(err)
+				return
+			}
+			go func() {
+				io.Copy(stdin, command.Stdin)
+				stdin.Close()
+			}()
+
+			defer command.Stdout.Close()
+			defer command.Stderr.Close()
+
+			returnResult := &CommandResponse{}
+			err = cmd.Start()
+			if err != nil {
+				// send return status back
+				log.Printf("cmd start failed with err:%s, cmdline:%s %v\n", err.Error(), command.Cmd, command.Args)
+				returnResult.Status = 10
+				err = command.StatusChan.Send(returnResult)
+				if err != nil {
+					log.Print(err)
+				}
+				return
+			}
+
+			// send pid back to client here
+			returnResult.Pid = cmd.Process.Pid
+			returnResult.Status = 0
+			err = command.StatusChan.Send(returnResult)
+			if err != nil {
+				log.Print(err)
+				if err = cmd.Process.Kill(); err != nil {
+					fmt.Println("Error when kill process")
+				}
+				return
+			}
+			log.Printf("create process with pid:%d\n", cmd.Process.Pid)
+
+			rch := make(chan error)
+			cch := make(chan error)
+
+			go func(c chan error) {
+				// check if other end is alive
+				tmpCommand := &RemoteCommand{}
+				c <- receiver.Receive(tmpCommand)
+				// double check
+				time.Sleep(1 * time.Millisecond)
+				c <- receiver.Receive(tmpCommand)
+			}(rch)
+
+			go func(c chan error) {
+				// check if command exit
+				c <- cmd.Wait()
+			}(cch)
+
+			var res error
+			select {
+			case <-rch:
+				log.Printf("stream closed, kill process:%d\n", cmd.Process.Pid)
+				if err = cmd.Process.Kill(); err != nil {
+					fmt.Println("Error when kill process: %d\n", cmd.Process.Pid)
+				}
+				return
+			case res = <-cch:
+				log.Printf("Command exit normmally:%d\n", cmd.Process.Pid)
+			}
+			if res != nil {
+				if exiterr, ok := res.(*exec.ExitError); ok {
+					returnResult.Status = exiterr.Sys().(syscall.WaitStatus).ExitStatus()
+				} else {
+					log.Print(res)
+					returnResult.Status = 10
+				}
+			}
+
+			err = command.StatusChan.Send(returnResult)
+			if err != nil {
+				log.Print(err)
+			}
+		}()
+	}
+}
-- 
2.23.0

