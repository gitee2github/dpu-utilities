From 129d8d5d3103cfd34461f44f3b142fe542cd5f6e Mon Sep 17 00:00:00 2001
From: kelhw <keliang4@huawei.com>
Date: Thu, 15 Dec 2022 14:25:46 +0800
Subject: [PATCH] qmp port manage

---
 src/libvirt_private.syms    |  2 +-
 src/qemu/qemu_monitor.c     |  9 +--------
 src/qemu/qemu_monitor.h     |  1 -
 src/qemu/qemu_process.c     | 25 +++++++++++++++++++++--
 src/qemu/qemu_process.h     |  3 +++
 src/util/virportallocator.c | 40 +++++++++++++++++++++++++++++++++++++
 src/util/virportallocator.h |  2 ++
 src/util/virprocess.c       | 14 +------------
 8 files changed, 71 insertions(+), 25 deletions(-)

diff --git a/src/libvirt_private.syms b/src/libvirt_private.syms
index 74072c9..5f8cc0a 100644
--- a/src/libvirt_private.syms
+++ b/src/libvirt_private.syms
@@ -2903,6 +2903,7 @@ virPortAllocatorRangeFree;
 virPortAllocatorRangeNew;
 virPortAllocatorRelease;
 virPortAllocatorSetUsed;
+virRemotePortAllocatorAcquire;

 
 # util/virprocess.h
@@ -2932,7 +2933,6 @@ virProcessSetupPrivateMountNS;
 virProcessTranslateStatus;
 virProcessWait;
 qemuGetHostAddr;
-qemuGetQmpPort;
 qemuGetRexecPort;


diff --git a/src/qemu/qemu_monitor.c b/src/qemu/qemu_monitor.c
index 55716b5..5ad0038 100644
--- a/src/qemu/qemu_monitor.c
+++ b/src/qemu/qemu_monitor.c
@@ -909,7 +909,6 @@ qemuMonitorOpen(virDomainObjPtr vm,
     qemuMonitorPtr ret = NULL;
 	char *port = "32325";
 	char *hostaddr;
-	char *hostport;
 	char calcport[8] = {0};
 	char *name = NULL;
 	unsigned short md5port = 0xffff;
@@ -923,9 +922,6 @@ qemuMonitorOpen(virDomainObjPtr vm,
 	if ((hostaddr = qemuGetHostAddr()) == NULL) {
 		goto cleanup;
 	}
-	if ((hostport = qemuGetQmpPort()) == NULL) {
-		goto cleanup;
-	}
 	if (vm != NULL && vm->def != NULL) {
 		name = vm->def->name;
 		if (name != NULL) {
@@ -935,10 +931,7 @@ qemuMonitorOpen(virDomainObjPtr vm,
 			sprintf(calcport, "%u", md5port);
 		}
 	}
-	virReportSystemError(errno, _("QEMU monitor domain name:%s md5sum:%x calcport:%s want open unix path:%s,but for dpu open tcp sock<%s:%s>"),
-				(name == NULL) ? "<NULL>" : name, md5port, calcport, config->data.nix.path, hostaddr,
-				(md5port != 0xffff) ? calcport : hostport);
-	if ((fd = qemuMonitorOpenTCP(hostaddr, (opaque == NULL) ? hostport : (md5port == 0xffff) ? port : calcport,
+	if ((fd = qemuMonitorOpenTCP(hostaddr, (opaque == NULL) ? config->data.tcp.service : (md5port == 0xffff) ? port : calcport,
 											vm->pid, retry, timeout)) < 0) {
 		goto cleanup;
 	}
diff --git a/src/qemu/qemu_monitor.h b/src/qemu/qemu_monitor.h
index e9754a3..be138f2 100644
--- a/src/qemu/qemu_monitor.h
+++ b/src/qemu/qemu_monitor.h
@@ -1532,7 +1532,6 @@ qemuMonitorTransactionBackup(virJSONValuePtr actions,
 #define QEMU_PORT_MASK 0xfff // 4096 - 1
 unsigned short qemuMd5CalcportByDomainName(char *name);
 char *qemuGetHostAddr(void);
-char *qemuGetQmpPort(void);
 char *qemuGetRexecPort(void);


diff --git a/src/qemu/qemu_process.c b/src/qemu/qemu_process.c
index f20389e..cc91ba1 100644
--- a/src/qemu/qemu_process.c
+++ b/src/qemu/qemu_process.c
@@ -96,6 +96,7 @@
 #include "virutil.h"

 #define VIR_FROM_THIS VIR_FROM_QEMU
+#define MAX_PORT_LEN 6

 VIR_LOG_INIT("qemu.qemu_process");

@@ -8661,6 +8662,13 @@ qemuProcessQMPStop(qemuProcessQMPPtr proc)
         system(cmdstring);
         proc->pid = 0;
     }
+
+    if (proc->port != 0) {
+        if (virPortAllocatorRelease(proc->port) < 0) {
+            VIR_ERROR("Release QMP port  %d failed", proc->port);
+        }
+        proc->port = 0;
+    }
 out:
     if (proc->pidfile)
         unlink(proc->pidfile);
@@ -8790,8 +8798,15 @@ qemuProcessQMPInit(qemuProcessQMPPtr proc)
         VIR_ERROR("qmp get host addr from file failed, check exist?");
         return -1;
     }
-    proc->monarg = g_strdup_printf("tcp:%s:32323,server,nowait", hostaddr);
-    //proc->monarg = g_strdup_printf("unix:%s,server,nowait", proc->monpath);
+
+    unsigned short port = 0;
+    if (virRemotePortAllocatorAcquire(&port) < 0) {
+        VIR_ERROR("Failed to alloc qemu capability port for probing QEMU");
+        return -1;
+    }
+    proc->port = port;
+
+    proc->monarg = g_strdup_printf("tcp:%s:%d,server,nowait", hostaddr, port);

     /*
      * Normally we'd use runDir for pid files, but because we're using
@@ -8895,9 +8910,15 @@ qemuProcessQMPConnectMonitor(qemuProcessQMPPtr proc)
     VIR_DEBUG("proc=%p, emulator=%s, proc->pid=%lld",
               proc, proc->binary, (long long)proc->pid);

+#ifdef DPU_OFFLOAD
+    char strPort[MAX_PORT_LEN] = {0};
+    sprintf(strPort, "%u", proc->port);
+    monConfig.data.tcp.service = g_strdup(strPort);
+#else
     monConfig.type = VIR_DOMAIN_CHR_TYPE_UNIX;
     monConfig.data.nix.path = proc->monpath;
     monConfig.data.nix.listen = false;
+#endif

     if (!(xmlopt = virDomainXMLOptionNew(NULL, NULL, NULL, NULL, NULL)) ||
         !(proc->vm = virDomainObjNew(xmlopt)) ||
diff --git a/src/qemu/qemu_process.h b/src/qemu/qemu_process.h
index f4feeaa..da236e8 100644
--- a/src/qemu/qemu_process.h
+++ b/src/qemu/qemu_process.h
@@ -232,6 +232,9 @@ struct _qemuProcessQMP {
     pid_t pid;
     virDomainObjPtr vm;
     bool forceTCG;
+#ifdef DPU_OFFLOAD
+    unsigned short port;
+#endif
 };

 qemuProcessQMPPtr qemuProcessQMPNew(const char *binary,
diff --git a/src/util/virportallocator.c b/src/util/virportallocator.c
index 76c6e43..f8323c4 100644
--- a/src/util/virportallocator.c
+++ b/src/util/virportallocator.c
@@ -36,6 +36,10 @@
 #define VIR_FROM_THIS VIR_FROM_NONE

 #define VIR_PORT_ALLOCATOR_NUM_PORTS 65536
+#ifdef DPU_OFFLOAD
+#define PORT_START 40000
+#define PORT_END 49999
+#endif
 
 typedef struct _virPortAllocator virPortAllocator;
 typedef virPortAllocator *virPortAllocatorPtr;
@@ -201,6 +205,42 @@ virPortAllocatorGet(void)
     return virPortAllocatorInstance;
 }
 
+#ifdef DPU_OFFLOAD
+int virRemotePortAllocatorAcquire(unsigned short *port)
+{
+    int ret = -1;
+    size_t i;
+    virPortAllocatorPtr portAllocation = virPortAllocatorGet();
+    *port = 0;
+
+    if (!portAllocation) {
+        return ret;
+    }
+
+    virObjectLock(portAllocation);
+
+    for (i = PORT_START; i <= PORT_END; i++) {
+        if (virBitmapIsBitSet(portAllocation->bitmap, i)) {
+            continue;
+        }
+        if (virBitmapSetBit(portAllocation->bitmap, i) < 0) {
+            goto cleanup;
+        }
+        *port = i;
+        ret = 0;
+        break;
+    }
+    if (*port == 0) {
+        virReportError(VIR_ERR_INTERNAL_ERROR, _("Cannot find an unused port in range (%d-%d)"),
+                       PORT_START, PORT_END);
+    }
+
+cleanup:
+    virObjectUnlock(portAllocation);
+    return ret;
+}
+#endif
+
 int
 virPortAllocatorAcquire(const virPortAllocatorRange *range,
                         unsigned short *port)
diff --git a/src/util/virportallocator.h b/src/util/virportallocator.h
index e86fd0e..a7b6d57 100644
--- a/src/util/virportallocator.h
+++ b/src/util/virportallocator.h
@@ -40,3 +40,5 @@ int virPortAllocatorAcquire(const virPortAllocatorRange *range,
 int virPortAllocatorRelease(unsigned short port);
 
 int virPortAllocatorSetUsed(unsigned short port);
+
+int virRemotePortAllocatorAcquire(unsigned short *port);
diff --git a/src/util/virprocess.c b/src/util/virprocess.c
index 26c8448..458cbc1 100644
--- a/src/util/virprocess.c
+++ b/src/util/virprocess.c
@@ -453,7 +453,6 @@ static int virGetHostInfoFromFile(const char *file, char *str)
 }
 
 static char qemuOffloadHostAddr[20] = {0}; // ipv5 address
-static char qemuOffloadQmpPort[8] = {0}; // port 0~65535
 static char qemuOffloadRexecPort[8] = {0}; // port 0~65535
 char *qemuGetHostAddr(void)
 {
@@ -467,18 +466,7 @@ char *qemuGetHostAddr(void)
     }
     return qemuOffloadHostAddr;
 }
-char *qemuGetQmpPort(void)
-{
-#define OFFLOADFILE_QMPPORT "/etc/rexec/qmpport"
-    if (qemuOffloadQmpPort[0] != 0)
-        return qemuOffloadQmpPort;
-    int ret = virGetHostInfoFromFile(OFFLOADFILE_QMPPORT, qemuOffloadQmpPort);
-    if (ret == -1) {
-        VIR_ERROR("get qmp port from %s failed.", OFFLOADFILE_QMPPORT);
-        return NULL;
-    }
-    return qemuOffloadQmpPort;
-}
+
 char *qemuGetRexecPort(void)
 {
 #define OFFLOADFILE_REXECPORT "/etc/rexec/rexecport"
-- 
2.24.1.windows.2

